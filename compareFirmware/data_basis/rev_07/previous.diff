diff --git a/drivers/include/pcd8544.h b/drivers/include/pcd8544.h
index 764a8b59fb..487bce7f87 100644
--- a/drivers/include/pcd8544.h
+++ b/drivers/include/pcd8544.h
@@ -149,6 +149,20 @@ void pcd8544_write_c(const pcd8544_t *dev, uint8_t x, uint8_t y, const char c);
  */
 void pcd8544_write_s(const pcd8544_t *dev, uint8_t x, uint8_t y, const char* str);
 
+/**
+ * @brief   Write a line to a given row on the display
+ *
+ * This function prints a given string to the given row and overwrites the rest with
+ * spaces. The position is given in terms of rows (y). If a string does not
+ * fit completely in the given position (it overflows its row), the overflowing
+ * part of the string is cut off.
+ *
+ * @param[in] dev           device descriptor of display to use
+ * @param[in] y             row to write the string to [0 - 5]
+ * @param[in] str           string to write to the display
+ */
+void pcd8544_write_l(const pcd8544_t *dev, uint8_t y, const char* str);
+
 /**
  * @brief   Clear the current display (clear the display memory)
  *
diff --git a/drivers/pcd8544/pcd8544.c b/drivers/pcd8544/pcd8544.c
index b477a288cd..6ef8e65dc9 100644
--- a/drivers/pcd8544/pcd8544.c
+++ b/drivers/pcd8544/pcd8544.c
@@ -345,6 +345,20 @@ void pcd8544_write_s(const pcd8544_t *dev, uint8_t x, uint8_t y, const char *s)
     }
 }
 
+void pcd8544_write_l(const pcd8544_t *dev, uint8_t y, const char *s)
+{
+    uint8_t x = 0;
+
+    /* write every char from string */
+    for (; (*s != '\0') && x < PCD8544_COLS; x++, s++) {
+        pcd8544_write_c(dev, x, y, *s);
+    }
+    /* fill rest with spaces */
+    for (; x < PCD8544_COLS; x++){
+        pcd8544_write_c(dev, x, y, *" ");
+    }
+}
+
 void pcd8544_clear(const pcd8544_t *dev)
 {
     lock(dev);
diff --git a/firmwareExample/main.c b/firmwareExample/main.c
index 832eb23d76..b2557d9a55 100644
--- a/firmwareExample/main.c
+++ b/firmwareExample/main.c
@@ -84,15 +84,14 @@ static int adc_read(int argc, char **argv) {
     (void)argv;
 
     ADC_thread_sleep = true;
-    char buffer[4] = {0};
+    char buffer[PCD8544_COLS] = {0};
 
     int sample = adc_sample(ADC_LINE(ADC_SAMPLE_LINE), ADC_RES_10BIT);
     DEBUG("ADC value: %d\n", sample);
 
     /* print to display */
-    pcd8544_write_s(&dev_pcd, 0, 0, "ADC: ");
-    sprintf(buffer, "%d   ", sample);
-    pcd8544_write_s(&dev_pcd, 5, 0, buffer);
+    sprintf(buffer, "ADC: %d", sample);
+    pcd8544_write_l(&dev_pcd, 0, buffer);
 
     return 1;
 }
@@ -102,16 +101,15 @@ void *adc_read_periodic(void *arg)
 {
     (void) arg;
     int sample = 0;
-    char buffer[4] = {0};
+    char buffer[PCD8544_COLS] = {0};
 
     while (1) {
         /* read ADC data */
         sample = adc_sample(ADC_LINE(ADC_SAMPLE_LINE), ADC_RES_10BIT);
         DEBUG("ADC value: %d\n", sample);
         /* print to display */
-        pcd8544_write_s(&dev_pcd, 0, 0, "ADC: ");
-        sprintf(buffer, "%d   ", sample);
-        pcd8544_write_s(&dev_pcd, 5, 0, buffer);
+        sprintf(buffer, "ADC: %d", sample);
+        pcd8544_write_l(&dev_pcd, 0, buffer);
 
         xtimer_usleep(ADC_thread_delay);
         if (ADC_thread_sleep)
@@ -160,23 +158,20 @@ static int lis3dh_read(int argc, char **argv) {
     LIS_thread_sleep = true;
 
     lis3dh_data_t data = {0};
-    char buffer[5] = {0};
+    char buffer[PCD8544_COLS] = {0};
 
     lis3dh_read_xyz(&dev_lis, &data);
     DEBUG("X: %d  Y: %d  Z: %d\n", data.acc_x, data.acc_y, data.acc_z);
 
     /* print to display */
-    pcd8544_write_s(&dev_pcd, 0, 1, "X: ");
-    sprintf(buffer, "%d    ", data.acc_x);
-    pcd8544_write_s(&dev_pcd, 3, 1, buffer);
+    sprintf(buffer, "X: %d", data.acc_x);
+    pcd8544_write_l(&dev_pcd, 1, buffer);
 
-    pcd8544_write_s(&dev_pcd, 0, 2, "Y: ");
-    sprintf(buffer, "%d    ", data.acc_y);
-    pcd8544_write_s(&dev_pcd, 3, 2, buffer);
+    sprintf(buffer, "Y: %d", data.acc_y);
+    pcd8544_write_l(&dev_pcd, 2, buffer);
 
-    pcd8544_write_s(&dev_pcd, 0, 3, "Z: ");
-    sprintf(buffer, "%d    ", data.acc_z);
-    pcd8544_write_s(&dev_pcd, 3, 3, buffer);
+    sprintf(buffer, "Z: %d", data.acc_z);
+    pcd8544_write_l(&dev_pcd, 3, buffer);
 
     return 0;
 }
@@ -186,7 +181,7 @@ void *lis_read_periodic(void *arg)
 {
     (void) arg;
     lis3dh_data_t data = {0};
-    char buffer[5] = {0};
+    char buffer[PCD8544_COLS] = {0};
 
     while (1) {
         /* read LIS data */
@@ -194,17 +189,14 @@ void *lis_read_periodic(void *arg)
         DEBUG("X: %d  Y: %d  Z: %d\n", data.acc_x, data.acc_y, data.acc_z);
 
         /* print to display */
-        pcd8544_write_s(&dev_pcd, 0, 1, "X: ");
-        sprintf(buffer, "%d    ", data.acc_x);
-        pcd8544_write_s(&dev_pcd, 3, 1, buffer);
+        sprintf(buffer, "X: %d", data.acc_x);
+        pcd8544_write_l(&dev_pcd, 1, buffer);
 
-        pcd8544_write_s(&dev_pcd, 0, 2, "Y: ");
-        sprintf(buffer, "%d    ", data.acc_y);
-        pcd8544_write_s(&dev_pcd, 3, 2, buffer);
+        sprintf(buffer, "Y: %d", data.acc_y);
+        pcd8544_write_l(&dev_pcd, 2, buffer);
 
-        pcd8544_write_s(&dev_pcd, 0, 3, "Z: ");
-        sprintf(buffer, "%d    ", data.acc_z);
-        pcd8544_write_s(&dev_pcd, 3, 3, buffer);
+        sprintf(buffer, "Z: %d", data.acc_z);
+        pcd8544_write_l(&dev_pcd, 3, buffer);
 
         xtimer_usleep(LIS_thread_delay);
         if (LIS_thread_sleep)
