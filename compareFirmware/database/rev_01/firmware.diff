diff --git a/compareFirmware/firmware_example/Makefile b/compareFirmware/firmware_example/Makefile
index f3db6e734c..405eea9c55 100644
--- a/compareFirmware/firmware_example/Makefile
+++ b/compareFirmware/firmware_example/Makefile
@@ -12,6 +12,9 @@ USEMODULE += shell_commands
 FEATURES_REQUIRED += periph_adc
 FEATURES_REQUIRED += periph_gpio_irq
 
+# acceleration sensor
+USEMODULE += lis2dh12_spi
+
 # gnrc_networking
 GNRC_NETIF_NUMOF := 1
 
diff --git a/compareFirmware/firmware_example/main.c b/compareFirmware/firmware_example/main.c
index 8389ec7cb2..1266691eeb 100644
--- a/compareFirmware/firmware_example/main.c
+++ b/compareFirmware/firmware_example/main.c
@@ -26,6 +26,15 @@
 #include "periph/adc.h"
 #include "board.h"
 
+#include "lis2dh12.h"
+#include "lis2dh12_params.h"
+#include "lis2dh12_registers.h"
+/* allocate device descriptor */
+static lis2dh12_t dev;
+
+#define ENABLE_DEBUG 0
+#include "debug.h"
+
 #define ADC_SAMPLE_LINE 0
 
 #define MAIN_QUEUE_SIZE (8)
@@ -54,10 +63,56 @@ void button_int_cb(void* arg){
     puts("interrupt received.");
 }
 
+/* LIS2DH12 init function */
+void lis2dh12_test_init(void) {
+
+    if (IS_USED(MODULE_LIS2DH12_SPI)) {
+        puts("using SPI mode, for I2C mode select the lis2dh12_i2c module");
+    } else {
+        puts("using I2C mode, for SPI mode select the lis2dh12_spi module");
+    }
+
+    /* init lis */
+    if (lis2dh12_init(&dev, &lis2dh12_params[0]) == LIS2DH12_OK) {
+        puts("lis2dh12 [Initialized]");
+    }
+    else {
+        puts("lis2dh12 [Failed]");
+    }
+
+    /* change LIS settings */
+    lis2dh12_set_resolution(&dev, LIS2DH12_POWER_LOW);
+    lis2dh12_set_datarate(&dev, LIS2DH12_RATE_100HZ);
+    lis2dh12_set_scale(&dev, LIS2DH12_SCALE_16G);
+
+    /* configure FIFO */
+    lis2dh12_fifo_t fifo_cfg = {
+        .FIFO_mode = LIS2DH12_FIFO_MODE_STREAM,
+    };
+
+    lis2dh12_set_fifo(&dev, &fifo_cfg);
+}
+
+/* read LIS values */
+static int shell_is2dh12_read(int argc, char **argv)
+{
+    (void)argc;
+    (void)argv;
+
+    lis2dh12_fifo_data_t data;
+
+    lis2dh12_read(&dev, &data);
+
+    printf("X: %d  Y: %d  Z: %d\n", data.axis.x, data.axis.y, data.axis.z);
+
+    return 0;
+}
+
 /* shell commands */
 static const shell_command_t shell_commands[] = {
-    { "toggle_LED", "toggles the LED status of LED0", toggle_LED},
-    { "adc", "reads the ADC0", read_ADC},
+    { "toggle_LED", "toggles the LED status of LED0", toggle_LED },
+    { "adc", "reads the ADC0", read_ADC },
+    { "lis_read", "Read acceleration data", shell_is2dh12_read },
     { NULL, NULL, NULL }
 };
 
@@ -81,6 +136,9 @@ int main(void)
     /* initializes the message queue */
     msg_init_queue(_main_msg_queue, MAIN_QUEUE_SIZE);
 
+    /* init acceleration sensor */
+    lis2dh12_test_init();
+
     /* start shell */
     puts("All up, running the shell now");
     char line_buf[SHELL_DEFAULT_BUFSIZE];
